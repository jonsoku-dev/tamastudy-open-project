# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PostComment {
  id: ID!
  body: String!
  user: Auth!
  post: Post!
}

type Post implements PostInterface {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [PostComment!]!
}

interface PostInterface {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [PostComment!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BoardCommentReply implements BoardCommentReplyInterface {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  user: Auth!
  boardCommentId: String!
  boardComment: BoardComment!
}

interface BoardCommentReplyInterface {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  user: Auth!
  boardCommentId: String!
  boardComment: BoardComment!
}

type BoardComment implements BoardCommentInterface {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  board: Board!
  boardCommentReplies: [BoardCommentReply!]!
}

interface BoardCommentInterface {
  id: ID!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  board: Board!
  boardCommentReplies: [BoardCommentReply!]!
}

type BoardLike {
  id: ID!
  userId: String!
}

type Board implements BoardInterface {
  id: ID!
  title: String!
  desc: String!
  view: Float!
  category: BoardCategory!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [BoardComment!]!
  likes: [BoardLike!]!
  filepath: String!
}

interface BoardInterface {
  id: ID!
  title: String!
  desc: String!
  view: Float!
  category: BoardCategory!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [BoardComment!]!
  likes: [BoardLike!]!
  filepath: String!
}

enum BoardCategory {
  ALL
  TRADE
  JOB
  FREE
  FQ
}

type GourmetComment implements GourmetCommentInterface {
  id: ID!
  body: String!
  images: String
  score: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  gourmet: Gourmet!
}

interface GourmetCommentInterface {
  id: ID!
  body: String!
  images: String
  score: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  gourmet: Gourmet!
}

type Gourmet implements GourmetInterface {
  id: ID!
  name: String!
  desc: String!
  category: GourmetCategory!
  score: Float!
  lat: String!
  lng: String!
  address: String!
  images: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [GourmetComment!]!
}

interface GourmetInterface {
  id: ID!
  name: String!
  desc: String!
  category: GourmetCategory!
  score: Float!
  lat: String!
  lng: String!
  address: String!
  images: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [GourmetComment!]!
}

enum GourmetCategory {
  NOODLE
  RICE
  BREAD
  MEAT
}

type Auth implements AuthInterface {
  id: ID!
  username: String!
  email: String!
  avatar: String
  followers: [Auth!]!
  following: [Auth!]!
}

interface AuthInterface {
  id: ID!
  username: String!
  email: String!
  avatar: String
  followers: [Auth!]!
  following: [Auth!]!
}

type LoginResponse {
  token: String!
}

type GetNoticeListResponseDto {
  id: String!
  title: String!
  desc: String!
  view: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
}

type GetNoticeResponseDto {
  id: String!
  title: String!
  desc: String!
  view: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
}

type PageInfo {
  hasNextPage: Boolean
  startCursor: String
  endCursor: String
}

type Edges {
  cursor: String!
  node: Board!
}

type BoardListResponseDto {
  edges: [Edges!]!
  pageInfo: PageInfo!
}

type PlaceholderResponse {
  userId: Float
  id: Float
  title: String
  completed: Boolean
}

type GetNewsListResponse {
  id: ID!
  title: String
  content: String
  press: String
  data: DateTime
  url: String
  portal: String
  flag: NewsFlagEnum!
}

enum NewsFlagEnum {
  KR
  JP
  US
}

type Openchat implements OpenchatInterface {
  id: ID!
  name: String!
  desc: String!
  category: OpenchatCategory!
  participationNumber: String!
  link: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

interface OpenchatInterface {
  id: ID!
  name: String!
  desc: String!
  category: OpenchatCategory!
  participationNumber: String!
  link: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OpenchatCategory {
  IT
  STUDY
  INFO
}

type GetOpenchatListResponseDto {
  id: ID!
  name: String!
  category: OpenchatCategory!
  participationNumber: String!
  link: String!
  createdAt: DateTime!
}

type GetGourmetListResponseDto {
  id: ID!
  name: String!
  desc: String!
  category: GourmetCategory!
  score: Float!
  lat: String!
  lng: String!
  address: String!
  images: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [GourmetComment!]!
}

type GetGourmetResponseDto {
  id: ID!
  name: String!
  desc: String!
  category: GourmetCategory!
  score: Float!
  lat: String!
  lng: String!
  address: String!
  images: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: Auth!
  comments: [GourmetComment!]!
}

type Query {
  currentUser: Auth!
  getPostList(filter: GetPostListFilter): [Post!]!
  getPost(postId: String!): Post!
  getNoticeList(search: String, limit: Float, offset: Float): [GetNoticeListResponseDto!]!
  getNotice(noticeId: String!): GetNoticeResponseDto!
  getBoardListByCategory(category: BoardCategory!): [Board!]!
  getBoardList(after: Float, first: Float, search: String, category: BoardCategory): BoardListResponseDto!
  getBoard(boardId: String!, isRefetch: Boolean = false): Board!
  getPlaceholder: [PlaceholderResponse!]!
  getNewsList(flag: NewsFlagEnum!): [GetNewsListResponse!]!
  getOpenchatList(category: OpenchatCategory, take: Float, offset: Float, search: String): [GetOpenchatListResponseDto!]!
  getGourmetList(search: String, category: GourmetCategory, limit: Float, offset: Float, score: Float, lat: String!, lng: String!): [GetGourmetListResponseDto!]!
  getGourmet(gourmetId: String!): GetGourmetResponseDto!
}

input GetPostListFilter {
  search: String
}

type Mutation {
  register(input: RegisterRequest!): Auth!
  login(input: LoginRequest!): LoginResponse!
  follow(targetUserId: String!): Auth!
  unFollow(targetUserId: String!): String!
  createPost(input: CreatePostRequest!): String!
  editPost(input: EditPostRequest!, postId: String!): String!
  deletePost(postId: String!): String!
  createPostComment(input: CreatePostCommentRequest!, postId: String!): String!
  editPostComment(input: EditPostCommentRequest!, postCommentId: String!): String!
  deletePostComment(postCommentId: String!): String!
  createNotice(input: CreateNoticeRequestDto!): String!
  editNotice(input: EditNoticeRequestDto!, noticeId: String!): String!
  deleteNotice(noticeId: String!): String!
  uploadFile(file: Upload!): Boolean!
  createBoard(file: Upload, input: CreateBoardRequestDto!): String!
  editBoard(input: EditBoardRequestDto!, boardId: String!): String!
  deleteBoard(boardId: String!): String!
  createBoardComment(input: CreateBoardCommentRequestDto!, boardId: String!): String!
  editBoardComment(input: EditBoardCommentRequestDto!, boardCommentId: String!): String!
  deleteBoardComment(boardCommentId: String!): String!
  like(boardId: String!): String!
  unLike(boardId: String!): String!
  createBoardCommentReply(body: String!, boardCommentId: String!): String!
  deleteBoardCommentReply(boardCommentReplyId: String!): String!
  editBoardCommentReply(input: EditBoardCommentReplyRequestDto!, boardCommentReplyId: String!): String!
  createOpenchat(input: CreateOpenchatRequestDto!): Openchat!
  editOpenchat(input: EditOpenchatRequestDto!, openchatId: String!): String!
  deleteOpenchat(openchatId: String!): String!
  createGourmet(input: CreateGourmetRequestDto!): Gourmet!
  editGourmet(input: EditGourmetRequestDto!, gourmetId: String!): String!
  deleteGourmet(gourmetId: String!): String!
  createGourmetComment(input: CreateGourmetCommentRequestDto!, gourmetId: String!): GourmetComment!
  editGourmetComment(input: EditGourmetCommentRequestDto!, gourmetCommentId: String!): String!
  deleteGourmetComment(gourmetCommentId: String!): String!
}

input RegisterRequest {
  username: String!
  email: String!
  password: String!
}

input LoginRequest {
  email: String!
  password: String!
}

input CreatePostRequest {
  content: String!
}

input EditPostRequest {
  content: String
}

input CreatePostCommentRequest {
  body: String!
}

input EditPostCommentRequest {
  body: String
}

input CreateNoticeRequestDto {
  title: String!
  desc: String!
}

input EditNoticeRequestDto {
  title: String
  desc: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateBoardRequestDto {
  title: String!
  desc: String!
  category: BoardCategory!
}

input EditBoardRequestDto {
  title: String
  desc: String
  category: BoardCategory
}

input CreateBoardCommentRequestDto {
  body: String!
}

input EditBoardCommentRequestDto {
  body: String
}

input EditBoardCommentReplyRequestDto {
  body: String
}

input CreateOpenchatRequestDto {
  name: String!
  desc: String!
  category: OpenchatCategory!
  participationNumber: String!
  link: String!
}

input EditOpenchatRequestDto {
  name: String
  desc: String
  category: OpenchatCategory
  participationNumber: String
  link: String
}

input CreateGourmetRequestDto {
  name: String!
  desc: String!
  category: GourmetCategory!
  score: Int!
  lat: String!
  lng: String!
  address: String!
  images: String
}

input EditGourmetRequestDto {
  name: String
  desc: String
  category: GourmetCategory
  score: Int
  lat: String
  lng: String
  address: String
  images: String
}

input CreateGourmetCommentRequestDto {
  body: String!
  score: Int!
  images: String
}

input EditGourmetCommentRequestDto {
  body: String
  score: Int
  images: String
}

type Subscription {
  followSubscription: Auth!
}
